{"version":3,"sources":["home/index.tsx","base-converter/index.tsx","template/Sidebar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","BinaryDisplay","value","v","result","toString","OctalDisplay","DecimalDisplay","HexadecimalDisplay","BaseConverter","useState","setValue","onChange","e","target","length","parseInt","isNaN","SidebarBlock","styled","div","Sidebar","links","map","link","to","name","AppBlock","App","className","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAMeA,EAJQ,WACrB,OAAO,wC,QCDHC,EAA6C,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAUpD,OAAO,0CATU,SAACC,GAEhB,IADA,IAAIC,EAAS,GACND,GACLC,EAAUD,EAAI,EAAKC,EACnBD,KAAOA,EAAI,GAEb,OAAOC,EAGWC,CAASH,OAGzBI,EAA4C,SAAC,GAAc,EAAZJ,MACnD,OAAO,yBAGHK,EAA8C,SAAC,GAAe,IAChDJ,EADmCD,EAAY,EAAZA,MAKrD,OAAO,4CAJWC,EAIYD,EAHrBC,EAAI,QAMTK,EAAkD,SAAC,GAAc,EAAZN,MACzD,OAAO,yBA2BMO,EAxBiB,WAAO,IAAD,EACVC,mBAAiB,GADP,mBAC7BR,EAD6B,KACtBS,EADsB,OAEZD,mBAAiB,IAFL,6BAIpC,OACE,gDAEE,8BAAMR,IACN,uBACEA,MAAOA,EACPU,SAAU,SAACC,GACqB,IAA1BA,EAAEC,OAAOZ,MAAMa,QAAcJ,EAAS,GAC1C,IAAMR,EAAIa,SAASH,EAAEC,OAAOZ,OACvBe,MAAMd,IAAIQ,EAASR,MAG5B,cAAC,EAAD,CAAeD,MAAOA,IACtB,cAAC,EAAD,CAAcA,MAAOA,IACrB,cAAC,EAAD,CAAgBA,MAAOA,IACvB,cAAC,EAAD,CAAoBA,MAAOA,Q,kZC9CjC,IAAMgB,EAAeC,IAAOC,IAAV,KAsCHC,EAhBsD,SAAC,GAE/D,IADLC,EACI,EADJA,MAEA,OACE,cAACJ,EAAD,UACE,6BACGI,EAAMC,KAAI,SAACC,GAAD,OACT,6BACE,cAAC,IAAD,CAAMC,GAAID,EAAKC,GAAf,SAAoBD,EAAKE,iB,gJC1BrC,IAAMJ,EAAQ,CACZ,CAAEI,KAAM,OAAQD,GAAI,KACpB,CAAEC,KAAM,iBAAkBD,GAAI,mBAG1BE,EAAWR,IAAOC,IAAV,KAsBCQ,MAhBf,WACE,OACE,eAACD,EAAD,CAAUE,UAAU,MAApB,UACE,cAAC,EAAD,CAASP,MAAOA,IAChB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOQ,KAAK,iBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,aCdKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de0c50d5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home: React.FC = () => {\n  return <div>Home</div>;\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\n\nconst BinaryDisplay: React.FC<{ value: number }> = ({ value }) => {\n  const toString = (v: number) => {\n    let result = \"\";\n    while (v) {\n      result = (v % 2) + result;\n      v = ~~(v / 2);\n    }\n    return result;\n  };\n\n  return <div>Binary {toString(value)}</div>;\n};\n\nconst OctalDisplay: React.FC<{ value: number }> = ({ value }) => {\n  return <div></div>;\n};\n\nconst DecimalDisplay: React.FC<{ value: number }> = ({ value }) => {\n  const toString = (v: number) => {\n    return v + \"\";\n  };\n\n  return <div>Decimal {toString(value)}</div>;\n};\n\nconst HexadecimalDisplay: React.FC<{ value: number }> = ({ value }) => {\n  return <div></div>;\n};\n\nconst BaseConverter: React.FC = () => {\n  const [value, setValue] = useState<number>(0);\n  const [base, setBase] = useState<number>(10);\n\n  return (\n    <div>\n      BaseConverter\n      <div>{value}</div>\n      <input\n        value={value}\n        onChange={(e) => {\n          if (e.target.value.length === 0) setValue(0);\n          const v = parseInt(e.target.value);\n          if (!isNaN(v)) setValue(v);\n        }}\n      ></input>\n      <BinaryDisplay value={value} />\n      <OctalDisplay value={value} />\n      <DecimalDisplay value={value} />\n      <HexadecimalDisplay value={value} />\n    </div>\n  );\n};\n\nexport default BaseConverter;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst SidebarBlock = styled.div`\n  border-right: 1px solid black;\n  ul {\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n    padding: 0;\n\n    li {\n      border: 1px solid black;\n    }\n\n    a {\n      display: block;\n      text-decoration: none;\n      color: inherit;\n    }\n  }\n  overflow: auto;\n`;\n\nconst Sidebar: React.FC<{ links: { name: string; to: string }[] }> = ({\n  links,\n}) => {\n  return (\n    <SidebarBlock>\n      <ul>\n        {links.map((link) => (\n          <li>\n            <Link to={link.to}>{link.name}</Link>\n          </li>\n        ))}\n      </ul>\n    </SidebarBlock>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./home\";\nimport BaseConverter from \"./base-converter\";\nimport Sidebar from \"./template/Sidebar\";\nimport styled from \"styled-components\";\n\nconst links = [\n  { name: \"Home\", to: \"/\" },\n  { name: \"Base Converter\", to: \"/baseconverter\" },\n];\n\nconst AppBlock = styled.div`\n  display: grid;\n  grid-template-columns: 200px 1fr;\n  height: 100vh;\n`;\n\nfunction App() {\n  return (\n    <AppBlock className=\"App\">\n      <Sidebar links={links} />\n      <Switch>\n        <Route path=\"/baseconverter\">\n          <BaseConverter />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </AppBlock>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}